name: Generate executables and post them to release

on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  generate-windows-executables:
    name: Build & publish for ${{ matrix.name }}
    runs-on: windows-latest
    strategy:
      matrix:
        name: 
          - x86_64-pc-windows-msvc
          - i686-pc-windows-msvc
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.name }}

      - name: Get app version
        id: app_version
        shell: pwsh
        run: |
          $version = (Get-Content .\Cargo.toml | Select-String -Pattern '^\s*version\s*=\s*"(\d+\.\d+\.\d+)"' | ForEach-Object { $_.Matches.Groups[1].Value })
          echo "APP_VERSION=$version" >> $env:GITHUB_OUTPUT

      - name: Set up cargo cache
        uses: actions/cache@v4
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Build release
        run: |
          cargo build --release --locked --target ${{ matrix.name }}
          mv ./target/${{ matrix.name }}/release/blest.exe ./blest-${{ steps.app_version.outputs.APP_VERSION }}-${{ matrix.name }}.exe

      - name: Upload executable to release
        uses: softprops/action-gh-release@v2
        with:
          files: blest-${{ steps.app_version.outputs.APP_VERSION }}-${{ matrix.name }}.exe
          tag_name: ${{ steps.app_version.outputs.APP_VERSION }}

  generate-linux-executables:
    name: Build & publish for ${{ matrix.target }}
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        rust:
          - stable
        target:
          - aarch64-unknown-linux-gnu
          - i586-unknown-linux-gnu
          - i686-unknown-linux-gnu
          - x86_64-unknown-linux-gnu

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}

      - name: Set up cargo cache
        uses: actions/cache@v4
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Get app version
        id: app_version
        run: echo "APP_VERSION=$(awk -F ' = ' '$1 ~ /version/ { gsub(/["]/, "", $2); printf("%s",$2) }' Cargo.toml)" >> $GITHUB_OUTPUT

      - name: Build release
        run: |
          cargo build --release --locked --target ${{ matrix.target }}
          mv ./target/${{ matrix.target }}/release/blest ./blest-${{ steps.app_version.outputs.APP_VERSION }}-${{ matrix.target }}

      - name: Upload executable to release
        uses: softprops/action-gh-release@v2
        id: upload_linux_executable
        with:
          files: blest-${{ steps.app_version.outputs.APP_VERSION }}-${{ matrix.target }}
          tag_name: ${{ steps.app_version.outputs.APP_VERSION }}

      - name: Replace placeholders in PKGBUILD
        id: placeholders
        run: |
          file_name="blest-${{ steps.app_version.outputs.APP_VERSION }}-${{ matrix.target }}"
          json=$(echo '${{ steps.upload_linux_executable.outputs.assets }}' | jq -r '.')
          download_url=$(echo "$json" | jq -r ".[] | select(.name == \"$file_name\") | .browser_download_url")
          b2sum=$(b2sum "$file_name" | awk '{print $1}')
          case "${{ matrix.target }}" in
            "x86_64-unknown-linux-gnu")    TARGET_ARCH="x86_64" ;;
            "i686-unknown-linux-gnu")      TARGET_ARCH="i686" ;;
            "aarch64-unknown-linux-gnu")   TARGET_ARCH="aarch64" ;;
            *) echo "Unsupported architecture: ${{ matrix.target }}" && exit 1 ;;
          esac
          echo "TARGET=${{ matrix.target }}" >> $GITHUB_OUTPUT
          echo "TARGET_ARCH=$TARGET_ARCH" >> $GITHUB_OUTPUT
          echo "DOWNLOAD_URL=$download_url" >> $GITHUB_OUTPUT
          echo "VERSION=${{ steps.app_version.outputs.APP_VERSION }}" >> $GITHUB_OUTPUT
          echo "EXEC_B2SUM=$b2sum" >> $GITHUB_OUTPUT
          echo "URL=$download_url" >> $GITHUB_OUTPUT
          echo "$file_name"
          echo "$download_url"
          echo "$b2sum"
        if: contains('aarch64-unknown-linux-gnu i686-unknown-linux-gnu x86_64-unknown-linux-gnu', matrix.target)
      
      - name: Build pacman package
        uses: 2m/arch-pkgbuild-builder@v1.16
        with:
          pkgname: "build/arch/blest/"
          target: 'pkgbuild'
        env:
          CARCH: "${{ steps.placeholders.outputs.TARGET_ARCH }}"
          FILE_NAME: "${{ steps.placeholders.outputs.FILE_NAME }}"
          TARGET: "${{ steps.placeholders.outputs.TARGET }}"
          VERSION: "${{ steps.placeholders.outputs.VERSION }}"
          DOWNLOAD_URL: "${{ steps.placeholders.outputs.DOWNLOAD_URL }}"
          URL: "${{ steps.placeholders.outputs.URL }}"
          EXEC_B2SUM: "${{ steps.placeholders.outputs.EXEC_B2SUM }}"
        if: contains('aarch64-unknown-linux-gnu i686-unknown-linux-gnu x86_64-unknown-linux-gnu', matrix.target)

      - name: Renaming package
        run: |
          cd build/arch/blest
          mv "blest-${{ steps.app_version.outputs.APP_VERSION }}-1-${{ steps.placeholders.outputs.TARGET_ARCH }}.pkg.tar.zst" blest-${{ steps.app_version.outputs.APP_VERSION }}-pacman-${{ steps.placeholders.outputs.TARGET_ARCH }}.pkg.tar.zst
        if: contains('aarch64-unknown-linux-gnu i686-unknown-linux-gnu x86_64-unknown-linux-gnu', matrix.target)

      - name: Upload package to release
        uses: softprops/action-gh-release@v2
        with:
          files: build/arch/blest/blest-${{ steps.app_version.outputs.APP_VERSION }}-pacman-${{ steps.placeholders.outputs.TARGET_ARCH }}.pkg.tar.zst
          tag_name: ${{ steps.app_version.outputs.APP_VERSION }}
        if: contains('aarch64-unknown-linux-gnu i686-unknown-linux-gnu x86_64-unknown-linux-gnu', matrix.target)

  generate-macos-executables:
    name: Build & publish for ${{ matrix.name }}
    runs-on: macos-latest
    strategy:
      matrix:
        name: 
          - x86_64-apple-darwin
          - aarch64-apple-darwin
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Environment Setup
        run: |
          export CFLAGS="-fno-stack-check"
          export MACOSX_DEPLOYMENT_TARGET="10.9"

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.name }}

      - name: Get app version
        id: app_version
        run: echo "APP_VERSION=$(awk -F ' = ' '$1 ~ /version/ { gsub(/["]/, "", $2); printf("%s",$2) }' Cargo.toml)" >> $GITHUB_OUTPUT

      - name: Set up cargo cache
        uses: actions/cache@v4
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Build release
        run: |
          cargo build --release --locked --target ${{ matrix.name }}
          mv ./target/${{ matrix.name }}/release/blest ./blest-${{ steps.app_version.outputs.APP_VERSION }}-${{ matrix.name }}

      - name: Upload executable to release
        uses: softprops/action-gh-release@v2
        with:
          files: blest-${{ steps.app_version.outputs.APP_VERSION }}-${{ matrix.name }}
          tag_name: ${{ steps.app_version.outputs.APP_VERSION }}